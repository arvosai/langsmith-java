// File generated from our OpenAPI spec by Stainless.

package com.langsmith.api.models

import com.langsmith.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class RunSchemaWithAnnotationQueueInfoTest {

    @Test
    fun createRunSchemaWithAnnotationQueueInfo() {
        val runSchemaWithAnnotationQueueInfo =
            RunSchemaWithAnnotationQueueInfo.builder()
                .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .appPath("string")
                .dottedOrder("string")
                .name("string")
                .runType(RunSchemaWithAnnotationQueueInfo.RunType.TOOL)
                .sessionId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .status("string")
                .traceId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .addedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .childRunIds(listOf("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"))
                .completionCost(42.23)
                .completionTokens(123L)
                .directChildRunIds(listOf("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"))
                .endTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .error("string")
                .events(listOf(JsonValue.from(mapOf<String, Any>())))
                .executionOrder(123L)
                .extra(JsonValue.from(mapOf<String, Any>()))
                .feedbackStats(RunSchemaWithAnnotationQueueInfo.FeedbackStats.builder().build())
                .firstTokenTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .inDataset(true)
                .inputs(JsonValue.from(mapOf<String, Any>()))
                .inputsS3Urls(JsonValue.from(mapOf<String, Any>()))
                .lastQueuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .lastReviewedTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .manifestId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .manifestS3Id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .outputs(JsonValue.from(mapOf<String, Any>()))
                .outputsS3Urls(JsonValue.from(mapOf<String, Any>()))
                .parentRunId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .parentRunIds(listOf("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"))
                .promptCost(42.23)
                .promptTokens(123L)
                .referenceExampleId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .serialized(JsonValue.from(mapOf<String, Any>()))
                .shareToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .startTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .tags(listOf("string"))
                .totalCost(42.23)
                .totalTokens(123L)
                .build()
        assertThat(runSchemaWithAnnotationQueueInfo).isNotNull
        assertThat(runSchemaWithAnnotationQueueInfo.id())
            .isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.appPath()).isEqualTo("string")
        assertThat(runSchemaWithAnnotationQueueInfo.dottedOrder()).isEqualTo("string")
        assertThat(runSchemaWithAnnotationQueueInfo.name()).isEqualTo("string")
        assertThat(runSchemaWithAnnotationQueueInfo.runType())
            .isEqualTo(RunSchemaWithAnnotationQueueInfo.RunType.TOOL)
        assertThat(runSchemaWithAnnotationQueueInfo.sessionId())
            .isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.status()).isEqualTo("string")
        assertThat(runSchemaWithAnnotationQueueInfo.traceId())
            .isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.addedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(runSchemaWithAnnotationQueueInfo.childRunIds().get())
            .containsExactly("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.completionCost()).contains(42.23)
        assertThat(runSchemaWithAnnotationQueueInfo.completionTokens()).contains(123L)
        assertThat(runSchemaWithAnnotationQueueInfo.directChildRunIds().get())
            .containsExactly("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.endTime())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(runSchemaWithAnnotationQueueInfo.error()).contains("string")
        assertThat(runSchemaWithAnnotationQueueInfo.events().get())
            .containsExactly(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo.executionOrder()).contains(123L)
        assertThat(runSchemaWithAnnotationQueueInfo._extra())
            .isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo.feedbackStats())
            .contains(RunSchemaWithAnnotationQueueInfo.FeedbackStats.builder().build())
        assertThat(runSchemaWithAnnotationQueueInfo.firstTokenTime())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(runSchemaWithAnnotationQueueInfo.inDataset()).contains(true)
        assertThat(runSchemaWithAnnotationQueueInfo._inputs())
            .isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo._inputsS3Urls())
            .isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo.lastQueuedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(runSchemaWithAnnotationQueueInfo.lastReviewedTime())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(runSchemaWithAnnotationQueueInfo.manifestId())
            .contains("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.manifestS3Id())
            .contains("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo._outputs())
            .isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo._outputsS3Urls())
            .isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo.parentRunId())
            .contains("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.parentRunIds().get())
            .containsExactly("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.promptCost()).contains(42.23)
        assertThat(runSchemaWithAnnotationQueueInfo.promptTokens()).contains(123L)
        assertThat(runSchemaWithAnnotationQueueInfo.referenceExampleId())
            .contains("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo._serialized())
            .isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(runSchemaWithAnnotationQueueInfo.shareToken())
            .contains("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(runSchemaWithAnnotationQueueInfo.startTime())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(runSchemaWithAnnotationQueueInfo.tags().get()).containsExactly("string")
        assertThat(runSchemaWithAnnotationQueueInfo.totalCost()).contains(42.23)
        assertThat(runSchemaWithAnnotationQueueInfo.totalTokens()).contains(123L)
    }
}
